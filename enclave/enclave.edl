/*
 * Copyright 2018 Alberto Sonnino
 * 
 * This file is part of SGX-WALLET.
 * 
 * SGX-WALLET is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SGX-WALLET is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */
 
enclave {

    // includes
    include "wallet.h"


    // define ECALLs
    trusted {
        public int ecall_create_wallet(
            [in, string]const char* master_password
        );

        public int ecall_show_wallet(
            [in, string]const char* master_password, 
            [out, size=wallet_size] wallet_t* wallet,
            size_t wallet_size
        );

        public int ecall_change_master_password(
            [in, string]const char* old_password, 
            [in, string]const char* new_password
        );

        public int ecall_add_item(
            [in, string]const char* master_password, 
            [in, size=item_size]const item_t* item,
            size_t item_size
        );

        public int ecall_remove_item(
            [in, string]const char* master_password, 
            int index
        );
    };


    // define OCALLs
    untrusted {
        void ocall_debug_print(
            [in, string]const char* str
        );

        int ocall_save_wallet(
            [in, size=sealed_size]const uint8_t* sealed_data, 
            size_t sealed_size
        );

        int ocall_load_wallet(
            [out, size=sealed_size]uint8_t* sealed_data, 
            size_t sealed_size
        );

        int ocall_is_wallet(void);


        // tmp 
        int ocall_save_tmp(
            [in, size=len]const wallet_t* data, 
            size_t len
        );

        int ocall_load_tmp(
            [out, size=len]wallet_t* data, 
            size_t len
        );
    };
};
